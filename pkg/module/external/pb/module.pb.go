// Copyright 2020 The jackal Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: module.proto

package v1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	stravaganza "github.com/jackal-xmpp/stravaganza/v2"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// GetStreamFeatureRequest is the parameter message for GetStreamFeature rpc.
type GetStreamFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domain is the domain value of the requested stream feature.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *GetStreamFeatureRequest) Reset() {
	*x = GetStreamFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamFeatureRequest) ProtoMessage() {}

func (x *GetStreamFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamFeatureRequest.ProtoReflect.Descriptor instead.
func (*GetStreamFeatureRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{0}
}

func (x *GetStreamFeatureRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// GetStreamFeatureResponse is the response returned by GetStreamFeature rpc.
type GetStreamFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// feature is the module stream feature stanza.
	Feature *stravaganza.PBElement `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
}

func (x *GetStreamFeatureResponse) Reset() {
	*x = GetStreamFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamFeatureResponse) ProtoMessage() {}

func (x *GetStreamFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamFeatureResponse.ProtoReflect.Descriptor instead.
func (*GetStreamFeatureResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{1}
}

func (x *GetStreamFeatureResponse) GetFeature() *stravaganza.PBElement {
	if x != nil {
		return x.Feature
	}
	return nil
}

// GetServerFeaturesRequest is the parameter message for GetServerFeatures rpc.
type GetServerFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetServerFeaturesRequest) Reset() {
	*x = GetServerFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerFeaturesRequest) ProtoMessage() {}

func (x *GetServerFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerFeaturesRequest.ProtoReflect.Descriptor instead.
func (*GetServerFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{2}
}

// GetServerFeaturesResponse is the response returned by GetServerFeatures rpc.
type GetServerFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// features contains features that should be announced by server entity.
	Features []string `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
}

func (x *GetServerFeaturesResponse) Reset() {
	*x = GetServerFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerFeaturesResponse) ProtoMessage() {}

func (x *GetServerFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerFeaturesResponse.ProtoReflect.Descriptor instead.
func (*GetServerFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{3}
}

func (x *GetServerFeaturesResponse) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

// GetAccountFeaturesRequest is the parameter message for GetAccountFeatures rpc.
type GetAccountFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAccountFeaturesRequest) Reset() {
	*x = GetAccountFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountFeaturesRequest) ProtoMessage() {}

func (x *GetAccountFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountFeaturesRequest.ProtoReflect.Descriptor instead.
func (*GetAccountFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{4}
}

// GetAccountFeaturesResponse is the response returned by GetAccountFeatures rpc.
type GetAccountFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// features contains features that should be announced by account entity.
	Features []string `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
}

func (x *GetAccountFeaturesResponse) Reset() {
	*x = GetAccountFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountFeaturesResponse) ProtoMessage() {}

func (x *GetAccountFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountFeaturesResponse.ProtoReflect.Descriptor instead.
func (*GetAccountFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{5}
}

func (x *GetAccountFeaturesResponse) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

// ProcessEventRequest is the parameter message for ProcessEvent rpc.
type ProcessEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instance_id is the id of the server instance that generated the event.
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// event_name is the name of the event object.
	EventName string `protobuf:"bytes,2,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	// payload contains all info specifically associated to the event.
	//
	// Types that are assignable to Payload:
	//	*ProcessEventRequest_ModsEvInfo
	//	*ProcessEventRequest_CompsEvInfo
	//	*ProcessEventRequest_C2SStreamEvInfo
	//	*ProcessEventRequest_S2SStreamEvInfo
	//	*ProcessEventRequest_ExtComponentEvInfo
	//	*ProcessEventRequest_RosterEvInfo
	//	*ProcessEventRequest_PrivateEvInfo
	//	*ProcessEventRequest_VcardEvInfo
	//	*ProcessEventRequest_OfflineEvInfo
	//	*ProcessEventRequest_UserEvInfo
	//	*ProcessEventRequest_BlocklistEvInfo
	//	*ProcessEventRequest_LastEvInfo
	Payload isProcessEventRequest_Payload `protobuf_oneof:"payload"`
}

func (x *ProcessEventRequest) Reset() {
	*x = ProcessEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEventRequest) ProtoMessage() {}

func (x *ProcessEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEventRequest.ProtoReflect.Descriptor instead.
func (*ProcessEventRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{6}
}

func (x *ProcessEventRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ProcessEventRequest) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (m *ProcessEventRequest) GetPayload() isProcessEventRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ProcessEventRequest) GetModsEvInfo() *ModulesEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_ModsEvInfo); ok {
		return x.ModsEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetCompsEvInfo() *ComponentsEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_CompsEvInfo); ok {
		return x.CompsEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetC2SStreamEvInfo() *C2SStreamEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_C2SStreamEvInfo); ok {
		return x.C2SStreamEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetS2SStreamEvInfo() *S2SStreamEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_S2SStreamEvInfo); ok {
		return x.S2SStreamEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetExtComponentEvInfo() *ExternalComponentEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_ExtComponentEvInfo); ok {
		return x.ExtComponentEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetRosterEvInfo() *RosterEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_RosterEvInfo); ok {
		return x.RosterEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetPrivateEvInfo() *PrivateEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_PrivateEvInfo); ok {
		return x.PrivateEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetVcardEvInfo() *VCardEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_VcardEvInfo); ok {
		return x.VcardEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetOfflineEvInfo() *OfflineEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_OfflineEvInfo); ok {
		return x.OfflineEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetUserEvInfo() *UserEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_UserEvInfo); ok {
		return x.UserEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetBlocklistEvInfo() *BlockListEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_BlocklistEvInfo); ok {
		return x.BlocklistEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetLastEvInfo() *LastEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_LastEvInfo); ok {
		return x.LastEvInfo
	}
	return nil
}

type isProcessEventRequest_Payload interface {
	isProcessEventRequest_Payload()
}

type ProcessEventRequest_ModsEvInfo struct {
	ModsEvInfo *ModulesEventInfo `protobuf:"bytes,3,opt,name=mods_ev_info,json=modsEvInfo,proto3,oneof"`
}

type ProcessEventRequest_CompsEvInfo struct {
	CompsEvInfo *ComponentsEventInfo `protobuf:"bytes,4,opt,name=comps_ev_info,json=compsEvInfo,proto3,oneof"`
}

type ProcessEventRequest_C2SStreamEvInfo struct {
	C2SStreamEvInfo *C2SStreamEventInfo `protobuf:"bytes,5,opt,name=c2s_stream_ev_info,json=c2sStreamEvInfo,proto3,oneof"`
}

type ProcessEventRequest_S2SStreamEvInfo struct {
	S2SStreamEvInfo *S2SStreamEventInfo `protobuf:"bytes,6,opt,name=s2s_stream_ev_info,json=s2sStreamEvInfo,proto3,oneof"`
}

type ProcessEventRequest_ExtComponentEvInfo struct {
	ExtComponentEvInfo *ExternalComponentEventInfo `protobuf:"bytes,7,opt,name=ext_component_ev_info,json=extComponentEvInfo,proto3,oneof"`
}

type ProcessEventRequest_RosterEvInfo struct {
	RosterEvInfo *RosterEventInfo `protobuf:"bytes,8,opt,name=roster_ev_info,json=rosterEvInfo,proto3,oneof"`
}

type ProcessEventRequest_PrivateEvInfo struct {
	PrivateEvInfo *PrivateEventInfo `protobuf:"bytes,9,opt,name=private_ev_info,json=privateEvInfo,proto3,oneof"`
}

type ProcessEventRequest_VcardEvInfo struct {
	VcardEvInfo *VCardEventInfo `protobuf:"bytes,10,opt,name=vcard_ev_info,json=vcardEvInfo,proto3,oneof"`
}

type ProcessEventRequest_OfflineEvInfo struct {
	OfflineEvInfo *OfflineEventInfo `protobuf:"bytes,11,opt,name=offline_ev_info,json=offlineEvInfo,proto3,oneof"`
}

type ProcessEventRequest_UserEvInfo struct {
	UserEvInfo *UserEventInfo `protobuf:"bytes,12,opt,name=user_ev_info,json=userEvInfo,proto3,oneof"`
}

type ProcessEventRequest_BlocklistEvInfo struct {
	BlocklistEvInfo *BlockListEventInfo `protobuf:"bytes,13,opt,name=blocklist_ev_info,json=blocklistEvInfo,proto3,oneof"`
}

type ProcessEventRequest_LastEvInfo struct {
	LastEvInfo *LastEventInfo `protobuf:"bytes,14,opt,name=last_ev_info,json=lastEvInfo,proto3,oneof"`
}

func (*ProcessEventRequest_ModsEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_CompsEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_C2SStreamEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_S2SStreamEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_ExtComponentEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_RosterEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_PrivateEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_VcardEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_OfflineEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_UserEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_BlocklistEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_LastEvInfo) isProcessEventRequest_Payload() {}

// ProcessEventResponse is the response returned by ProcessEvent rpc.
type ProcessEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProcessEventResponse) Reset() {
	*x = ProcessEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEventResponse) ProtoMessage() {}

func (x *ProcessEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEventResponse.ProtoReflect.Descriptor instead.
func (*ProcessEventResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{7}
}

// ProcessIQRequest is the parameter message for ProcessIQ rpc.
type ProcessIQRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// iq is the module registered IQ to be processed.
	Iq *stravaganza.PBElement `protobuf:"bytes,1,opt,name=iq,proto3" json:"iq,omitempty"`
}

func (x *ProcessIQRequest) Reset() {
	*x = ProcessIQRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessIQRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessIQRequest) ProtoMessage() {}

func (x *ProcessIQRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessIQRequest.ProtoReflect.Descriptor instead.
func (*ProcessIQRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{8}
}

func (x *ProcessIQRequest) GetIq() *stravaganza.PBElement {
	if x != nil {
		return x.Iq
	}
	return nil
}

// ProcessIQResponse is the response returned by ProcessIQ rpc.
type ProcessIQResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProcessIQResponse) Reset() {
	*x = ProcessIQResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessIQResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessIQResponse) ProtoMessage() {}

func (x *ProcessIQResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessIQResponse.ProtoReflect.Descriptor instead.
func (*ProcessIQResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{9}
}

// InterceptStanzaRequest is the parameter message for InterceptStanza rpc.
type InterceptStanzaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id contains the associated interceptor identifier.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// stanza is the intercepted stanza.
	Stanza *stravaganza.PBElement `protobuf:"bytes,2,opt,name=stanza,proto3" json:"stanza,omitempty"`
}

func (x *InterceptStanzaRequest) Reset() {
	*x = InterceptStanzaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterceptStanzaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterceptStanzaRequest) ProtoMessage() {}

func (x *InterceptStanzaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterceptStanzaRequest.ProtoReflect.Descriptor instead.
func (*InterceptStanzaRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{10}
}

func (x *InterceptStanzaRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InterceptStanzaRequest) GetStanza() *stravaganza.PBElement {
	if x != nil {
		return x.Stanza
	}
	return nil
}

// InterceptStanzaResponse is the response returned by InterceptStanza rpc.
type InterceptStanzaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// interrupt tells whether stanza interception should be interrupted.
	Interrupt bool `protobuf:"varint,1,opt,name=interrupt,proto3" json:"interrupt,omitempty"`
	// stanza contains the resulting XMPP stanza.
	Stanza *stravaganza.PBElement `protobuf:"bytes,2,opt,name=stanza,proto3" json:"stanza,omitempty"`
}

func (x *InterceptStanzaResponse) Reset() {
	*x = InterceptStanzaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterceptStanzaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterceptStanzaResponse) ProtoMessage() {}

func (x *InterceptStanzaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterceptStanzaResponse.ProtoReflect.Descriptor instead.
func (*InterceptStanzaResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{11}
}

func (x *InterceptStanzaResponse) GetInterrupt() bool {
	if x != nil {
		return x.Interrupt
	}
	return false
}

func (x *InterceptStanzaResponse) GetStanza() *stravaganza.PBElement {
	if x != nil {
		return x.Stanza
	}
	return nil
}

// GetStanzasRequest is the parameter message for GetStanzas rpc.
type GetStanzasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStanzasRequest) Reset() {
	*x = GetStanzasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStanzasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStanzasRequest) ProtoMessage() {}

func (x *GetStanzasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStanzasRequest.ProtoReflect.Descriptor instead.
func (*GetStanzasRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{12}
}

// ModulesEventInfo contains all info associated to a modules event.
type ModulesEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module_names contains all module names associated to this event.
	ModuleNames []string `protobuf:"bytes,1,rep,name=module_names,json=moduleNames,proto3" json:"module_names,omitempty"`
}

func (x *ModulesEventInfo) Reset() {
	*x = ModulesEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModulesEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModulesEventInfo) ProtoMessage() {}

func (x *ModulesEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModulesEventInfo.ProtoReflect.Descriptor instead.
func (*ModulesEventInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{13}
}

func (x *ModulesEventInfo) GetModuleNames() []string {
	if x != nil {
		return x.ModuleNames
	}
	return nil
}

// ComponentsEventInfo contains all information associated to a components event.
type ComponentsEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hosts contains all components host values.
	Hosts []string `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
}

func (x *ComponentsEventInfo) Reset() {
	*x = ComponentsEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentsEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentsEventInfo) ProtoMessage() {}

func (x *ComponentsEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentsEventInfo.ProtoReflect.Descriptor instead.
func (*ComponentsEventInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{14}
}

func (x *ComponentsEventInfo) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

// C2SStreamEventInfo contains all info associated to a C2S stream event.
type C2SStreamEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the event stream identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// jid represents the event associated JID.
	Jid string `protobuf:"bytes,2,opt,name=jid,proto3" json:"jid,omitempty"`
	// targets contains all JIDs to which the event stanza was routed.
	Targets []string `protobuf:"bytes,3,rep,name=targets,proto3" json:"targets,omitempty"`
	// stanza contains the XMPP element associated to the event.
	Element *stravaganza.PBElement `protobuf:"bytes,4,opt,name=element,proto3" json:"element,omitempty"`
}

func (x *C2SStreamEventInfo) Reset() {
	*x = C2SStreamEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2SStreamEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2SStreamEventInfo) ProtoMessage() {}

func (x *C2SStreamEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2SStreamEventInfo.ProtoReflect.Descriptor instead.
func (*C2SStreamEventInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{15}
}

func (x *C2SStreamEventInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *C2SStreamEventInfo) GetJid() string {
	if x != nil {
		return x.Jid
	}
	return ""
}

func (x *C2SStreamEventInfo) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *C2SStreamEventInfo) GetElement() *stravaganza.PBElement {
	if x != nil {
		return x.Element
	}
	return nil
}

// S2SStreamEventInfo contains all info associated to a S2S stream event.
type S2SStreamEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the event stream identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// sender is the S2S sender domain.
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// target is the S2S target domain.
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// stanza contains the XMPP element associated to the event.
	Element *stravaganza.PBElement `protobuf:"bytes,4,opt,name=element,proto3" json:"element,omitempty"`
}

func (x *S2SStreamEventInfo) Reset() {
	*x = S2SStreamEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2SStreamEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2SStreamEventInfo) ProtoMessage() {}

func (x *S2SStreamEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2SStreamEventInfo.ProtoReflect.Descriptor instead.
func (*S2SStreamEventInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{16}
}

func (x *S2SStreamEventInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *S2SStreamEventInfo) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *S2SStreamEventInfo) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *S2SStreamEventInfo) GetElement() *stravaganza.PBElement {
	if x != nil {
		return x.Element
	}
	return nil
}

// ExternalComponentEventInfo contains all info associated to an external component stream event.
type ExternalComponentEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the event stream identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// host is the external component host domain.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// stanza contains the XMPP stanza associated to the event.
	Stanza *stravaganza.PBElement `protobuf:"bytes,3,opt,name=stanza,proto3" json:"stanza,omitempty"`
}

func (x *ExternalComponentEventInfo) Reset() {
	*x = ExternalComponentEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalComponentEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalComponentEventInfo) ProtoMessage() {}

func (x *ExternalComponentEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalComponentEventInfo.ProtoReflect.Descriptor instead.
func (*ExternalComponentEventInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{17}
}

func (x *ExternalComponentEventInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExternalComponentEventInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ExternalComponentEventInfo) GetStanza() *stravaganza.PBElement {
	if x != nil {
		return x.Stanza
	}
	return nil
}

// RosterEventInfo contains all information associated to a roster event.
type RosterEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// username is the name of the roster owner.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// jid represents the event associated JID.
	Jid string `protobuf:"bytes,2,opt,name=jid,proto3" json:"jid,omitempty"`
	// subscription is the roster event subscription value.
	Subscription string `protobuf:"bytes,3,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *RosterEventInfo) Reset() {
	*x = RosterEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RosterEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RosterEventInfo) ProtoMessage() {}

func (x *RosterEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RosterEventInfo.ProtoReflect.Descriptor instead.
func (*RosterEventInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{18}
}

func (x *RosterEventInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RosterEventInfo) GetJid() string {
	if x != nil {
		return x.Jid
	}
	return ""
}

func (x *RosterEventInfo) GetSubscription() string {
	if x != nil {
		return x.Subscription
	}
	return ""
}

// PrivateEventInfo contains all information associated to a private event.
type PrivateEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// username is the name of the user associated to this event.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// private represents the event associated private element.
	Private *stravaganza.PBElement `protobuf:"bytes,2,opt,name=private,proto3" json:"private,omitempty"`
}

func (x *PrivateEventInfo) Reset() {
	*x = PrivateEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateEventInfo) ProtoMessage() {}

func (x *PrivateEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateEventInfo.ProtoReflect.Descriptor instead.
func (*PrivateEventInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{19}
}

func (x *PrivateEventInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PrivateEventInfo) GetPrivate() *stravaganza.PBElement {
	if x != nil {
		return x.Private
	}
	return nil
}

// VCardEventInfo contains all information associated to a vCard event.
type VCardEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// username is the name of the vCard user associated to this event.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// vcard represents the event associated vcard element.
	Vcard *stravaganza.PBElement `protobuf:"bytes,2,opt,name=vcard,proto3" json:"vcard,omitempty"`
}

func (x *VCardEventInfo) Reset() {
	*x = VCardEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCardEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCardEventInfo) ProtoMessage() {}

func (x *VCardEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCardEventInfo.ProtoReflect.Descriptor instead.
func (*VCardEventInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{20}
}

func (x *VCardEventInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *VCardEventInfo) GetVcard() *stravaganza.PBElement {
	if x != nil {
		return x.Vcard
	}
	return nil
}

// OfflineEventInfo contails all information associated to an offline event.
type OfflineEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// username is the name of the vCard user associated to this event.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// message represents the event associated message.
	Message *stravaganza.PBElement `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *OfflineEventInfo) Reset() {
	*x = OfflineEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineEventInfo) ProtoMessage() {}

func (x *OfflineEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineEventInfo.ProtoReflect.Descriptor instead.
func (*OfflineEventInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{21}
}

func (x *OfflineEventInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OfflineEventInfo) GetMessage() *stravaganza.PBElement {
	if x != nil {
		return x.Message
	}
	return nil
}

// UserEventInfo contains all information associated to a user event.
type UserEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// username is the name of the user associated to this event.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *UserEventInfo) Reset() {
	*x = UserEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventInfo) ProtoMessage() {}

func (x *UserEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventInfo.ProtoReflect.Descriptor instead.
func (*UserEventInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{22}
}

func (x *UserEventInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// BlockListEventInfo contains all information associated to a blocklist event.
type BlockListEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// username is the name of the user associated to this event.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// jids contains all JIDs associated to this event.
	Jids []string `protobuf:"bytes,2,rep,name=jids,proto3" json:"jids,omitempty"`
}

func (x *BlockListEventInfo) Reset() {
	*x = BlockListEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockListEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockListEventInfo) ProtoMessage() {}

func (x *BlockListEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockListEventInfo.ProtoReflect.Descriptor instead.
func (*BlockListEventInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{23}
}

func (x *BlockListEventInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BlockListEventInfo) GetJids() []string {
	if x != nil {
		return x.Jids
	}
	return nil
}

// LastEventInfo contains all information associated to a last activity event.
type LastEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// username is the name of the user associated to this event.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// jid represents the event associated JID.
	Jid string `protobuf:"bytes,2,opt,name=jid,proto3" json:"jid,omitempty"`
}

func (x *LastEventInfo) Reset() {
	*x = LastEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastEventInfo) ProtoMessage() {}

func (x *LastEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastEventInfo.ProtoReflect.Descriptor instead.
func (*LastEventInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{24}
}

func (x *LastEventInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LastEventInfo) GetJid() string {
	if x != nil {
		return x.Jid
	}
	return ""
}

var File_module_proto protoreflect.FileDescriptor

var file_module_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14,
	0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2d, 0x78, 0x6d, 0x70, 0x70, 0x2f, 0x73, 0x74, 0x72,
	0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67,
	0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x4c, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x50, 0x42, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x38, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xbf, 0x08, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4a, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x73, 0x5f, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x73, 0x45, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x73, 0x5f, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x73, 0x45, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x12,
	0x63, 0x32, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x76, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x32, 0x53, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x32, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x12, 0x73, 0x32, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x32, 0x53, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x32, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x65,
	0x0a, 0x15, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x12, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x65, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x65, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0d, 0x76, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x65, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x43, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x63, 0x61, 0x72, 0x64, 0x45, 0x76, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x50, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x76,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6a, 0x61,
	0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x61, 0x63,
	0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x45, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x56, 0x0a,
	0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x45,
	0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x61,
	0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3a, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x51, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61, 0x2e,
	0x50, 0x42, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x02, 0x69, 0x71, 0x22, 0x13, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x51, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x58, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x53,
	0x74, 0x61, 0x6e, 0x7a, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x50, 0x42, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x22, 0x67, 0x0a, 0x17,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67, 0x61,
	0x6e, 0x7a, 0x61, 0x2e, 0x50, 0x42, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x6e, 0x7a, 0x61, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6e,
	0x7a, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x10, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x2b, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x82,
	0x01, 0x0a, 0x12, 0x43, 0x32, 0x53, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6a, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61,
	0x2e, 0x50, 0x42, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x53, 0x32, 0x53, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x50, 0x42, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x1a,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x50, 0x42, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x22, 0x63,
	0x0a, 0x0f, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6a, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e,
	0x7a, 0x61, 0x2e, 0x50, 0x42, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x5a, 0x0a, 0x0e, 0x56, 0x43, 0x61, 0x72, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61,
	0x2e, 0x50, 0x42, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x63, 0x61, 0x72,
	0x64, 0x22, 0x60, 0x0a, 0x10, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61,
	0x2e, 0x50, 0x42, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x44, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6a, 0x69, 0x64, 0x73, 0x22, 0x3d, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6a, 0x69, 0x64, 0x32, 0xf0, 0x05, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x71, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x2f, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x29, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x51, 0x12, 0x26, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x51, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x51, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x12, 0x2c, 0x2e, 0x6a, 0x61, 0x63,
	0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x7a,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x6e, 0x7a, 0x61, 0x73, 0x12, 0x27, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x50, 0x42, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x42, 0x60, 0x0a, 0x1d, 0x6f, 0x72, 0x67, 0x2e,
	0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x71, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x47, 0x72, 0x70, 0x63, 0x41, 0x50, 0x49, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2d, 0x78, 0x6d,
	0x70, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_module_proto_rawDescOnce sync.Once
	file_module_proto_rawDescData = file_module_proto_rawDesc
)

func file_module_proto_rawDescGZIP() []byte {
	file_module_proto_rawDescOnce.Do(func() {
		file_module_proto_rawDescData = protoimpl.X.CompressGZIP(file_module_proto_rawDescData)
	})
	return file_module_proto_rawDescData
}

var file_module_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_module_proto_goTypes = []interface{}{
	(*GetStreamFeatureRequest)(nil),    // 0: jackal.api.module.v1.GetStreamFeatureRequest
	(*GetStreamFeatureResponse)(nil),   // 1: jackal.api.module.v1.GetStreamFeatureResponse
	(*GetServerFeaturesRequest)(nil),   // 2: jackal.api.module.v1.GetServerFeaturesRequest
	(*GetServerFeaturesResponse)(nil),  // 3: jackal.api.module.v1.GetServerFeaturesResponse
	(*GetAccountFeaturesRequest)(nil),  // 4: jackal.api.module.v1.GetAccountFeaturesRequest
	(*GetAccountFeaturesResponse)(nil), // 5: jackal.api.module.v1.GetAccountFeaturesResponse
	(*ProcessEventRequest)(nil),        // 6: jackal.api.module.v1.ProcessEventRequest
	(*ProcessEventResponse)(nil),       // 7: jackal.api.module.v1.ProcessEventResponse
	(*ProcessIQRequest)(nil),           // 8: jackal.api.module.v1.ProcessIQRequest
	(*ProcessIQResponse)(nil),          // 9: jackal.api.module.v1.ProcessIQResponse
	(*InterceptStanzaRequest)(nil),     // 10: jackal.api.module.v1.InterceptStanzaRequest
	(*InterceptStanzaResponse)(nil),    // 11: jackal.api.module.v1.InterceptStanzaResponse
	(*GetStanzasRequest)(nil),          // 12: jackal.api.module.v1.GetStanzasRequest
	(*ModulesEventInfo)(nil),           // 13: jackal.api.module.v1.ModulesEventInfo
	(*ComponentsEventInfo)(nil),        // 14: jackal.api.module.v1.ComponentsEventInfo
	(*C2SStreamEventInfo)(nil),         // 15: jackal.api.module.v1.C2SStreamEventInfo
	(*S2SStreamEventInfo)(nil),         // 16: jackal.api.module.v1.S2SStreamEventInfo
	(*ExternalComponentEventInfo)(nil), // 17: jackal.api.module.v1.ExternalComponentEventInfo
	(*RosterEventInfo)(nil),            // 18: jackal.api.module.v1.RosterEventInfo
	(*PrivateEventInfo)(nil),           // 19: jackal.api.module.v1.PrivateEventInfo
	(*VCardEventInfo)(nil),             // 20: jackal.api.module.v1.VCardEventInfo
	(*OfflineEventInfo)(nil),           // 21: jackal.api.module.v1.OfflineEventInfo
	(*UserEventInfo)(nil),              // 22: jackal.api.module.v1.UserEventInfo
	(*BlockListEventInfo)(nil),         // 23: jackal.api.module.v1.BlockListEventInfo
	(*LastEventInfo)(nil),              // 24: jackal.api.module.v1.LastEventInfo
	(*stravaganza.PBElement)(nil),      // 25: stravaganza.PBElement
}
var file_module_proto_depIdxs = []int32{
	25, // 0: jackal.api.module.v1.GetStreamFeatureResponse.feature:type_name -> stravaganza.PBElement
	13, // 1: jackal.api.module.v1.ProcessEventRequest.mods_ev_info:type_name -> jackal.api.module.v1.ModulesEventInfo
	14, // 2: jackal.api.module.v1.ProcessEventRequest.comps_ev_info:type_name -> jackal.api.module.v1.ComponentsEventInfo
	15, // 3: jackal.api.module.v1.ProcessEventRequest.c2s_stream_ev_info:type_name -> jackal.api.module.v1.C2SStreamEventInfo
	16, // 4: jackal.api.module.v1.ProcessEventRequest.s2s_stream_ev_info:type_name -> jackal.api.module.v1.S2SStreamEventInfo
	17, // 5: jackal.api.module.v1.ProcessEventRequest.ext_component_ev_info:type_name -> jackal.api.module.v1.ExternalComponentEventInfo
	18, // 6: jackal.api.module.v1.ProcessEventRequest.roster_ev_info:type_name -> jackal.api.module.v1.RosterEventInfo
	19, // 7: jackal.api.module.v1.ProcessEventRequest.private_ev_info:type_name -> jackal.api.module.v1.PrivateEventInfo
	20, // 8: jackal.api.module.v1.ProcessEventRequest.vcard_ev_info:type_name -> jackal.api.module.v1.VCardEventInfo
	21, // 9: jackal.api.module.v1.ProcessEventRequest.offline_ev_info:type_name -> jackal.api.module.v1.OfflineEventInfo
	22, // 10: jackal.api.module.v1.ProcessEventRequest.user_ev_info:type_name -> jackal.api.module.v1.UserEventInfo
	23, // 11: jackal.api.module.v1.ProcessEventRequest.blocklist_ev_info:type_name -> jackal.api.module.v1.BlockListEventInfo
	24, // 12: jackal.api.module.v1.ProcessEventRequest.last_ev_info:type_name -> jackal.api.module.v1.LastEventInfo
	25, // 13: jackal.api.module.v1.ProcessIQRequest.iq:type_name -> stravaganza.PBElement
	25, // 14: jackal.api.module.v1.InterceptStanzaRequest.stanza:type_name -> stravaganza.PBElement
	25, // 15: jackal.api.module.v1.InterceptStanzaResponse.stanza:type_name -> stravaganza.PBElement
	25, // 16: jackal.api.module.v1.C2SStreamEventInfo.element:type_name -> stravaganza.PBElement
	25, // 17: jackal.api.module.v1.S2SStreamEventInfo.element:type_name -> stravaganza.PBElement
	25, // 18: jackal.api.module.v1.ExternalComponentEventInfo.stanza:type_name -> stravaganza.PBElement
	25, // 19: jackal.api.module.v1.PrivateEventInfo.private:type_name -> stravaganza.PBElement
	25, // 20: jackal.api.module.v1.VCardEventInfo.vcard:type_name -> stravaganza.PBElement
	25, // 21: jackal.api.module.v1.OfflineEventInfo.message:type_name -> stravaganza.PBElement
	0,  // 22: jackal.api.module.v1.Module.GetStreamFeature:input_type -> jackal.api.module.v1.GetStreamFeatureRequest
	2,  // 23: jackal.api.module.v1.Module.GetServerFeatures:input_type -> jackal.api.module.v1.GetServerFeaturesRequest
	4,  // 24: jackal.api.module.v1.Module.GetAccountFeatures:input_type -> jackal.api.module.v1.GetAccountFeaturesRequest
	6,  // 25: jackal.api.module.v1.Module.ProcessEvent:input_type -> jackal.api.module.v1.ProcessEventRequest
	8,  // 26: jackal.api.module.v1.Module.ProcessIQ:input_type -> jackal.api.module.v1.ProcessIQRequest
	10, // 27: jackal.api.module.v1.Module.InterceptStanza:input_type -> jackal.api.module.v1.InterceptStanzaRequest
	12, // 28: jackal.api.module.v1.Module.GetStanzas:input_type -> jackal.api.module.v1.GetStanzasRequest
	1,  // 29: jackal.api.module.v1.Module.GetStreamFeature:output_type -> jackal.api.module.v1.GetStreamFeatureResponse
	3,  // 30: jackal.api.module.v1.Module.GetServerFeatures:output_type -> jackal.api.module.v1.GetServerFeaturesResponse
	5,  // 31: jackal.api.module.v1.Module.GetAccountFeatures:output_type -> jackal.api.module.v1.GetAccountFeaturesResponse
	7,  // 32: jackal.api.module.v1.Module.ProcessEvent:output_type -> jackal.api.module.v1.ProcessEventResponse
	9,  // 33: jackal.api.module.v1.Module.ProcessIQ:output_type -> jackal.api.module.v1.ProcessIQResponse
	11, // 34: jackal.api.module.v1.Module.InterceptStanza:output_type -> jackal.api.module.v1.InterceptStanzaResponse
	25, // 35: jackal.api.module.v1.Module.GetStanzas:output_type -> stravaganza.PBElement
	29, // [29:36] is the sub-list for method output_type
	22, // [22:29] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_module_proto_init() }
func file_module_proto_init() {
	if File_module_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_module_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessIQRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessIQResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterceptStanzaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterceptStanzaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStanzasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModulesEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentsEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2SStreamEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2SStreamEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalComponentEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RosterEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCardEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockListEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_module_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ProcessEventRequest_ModsEvInfo)(nil),
		(*ProcessEventRequest_CompsEvInfo)(nil),
		(*ProcessEventRequest_C2SStreamEvInfo)(nil),
		(*ProcessEventRequest_S2SStreamEvInfo)(nil),
		(*ProcessEventRequest_ExtComponentEvInfo)(nil),
		(*ProcessEventRequest_RosterEvInfo)(nil),
		(*ProcessEventRequest_PrivateEvInfo)(nil),
		(*ProcessEventRequest_VcardEvInfo)(nil),
		(*ProcessEventRequest_OfflineEvInfo)(nil),
		(*ProcessEventRequest_UserEvInfo)(nil),
		(*ProcessEventRequest_BlocklistEvInfo)(nil),
		(*ProcessEventRequest_LastEvInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_module_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_module_proto_goTypes,
		DependencyIndexes: file_module_proto_depIdxs,
		MessageInfos:      file_module_proto_msgTypes,
	}.Build()
	File_module_proto = out.File
	file_module_proto_rawDesc = nil
	file_module_proto_goTypes = nil
	file_module_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ModuleClient is the client API for Module service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ModuleClient interface {
	// GetStreamFeature returns module stream feature stanza.
	GetStreamFeature(ctx context.Context, in *GetStreamFeatureRequest, opts ...grpc.CallOption) (*GetStreamFeatureResponse, error)
	// GetServerFeatures returns module server disco features.
	GetServerFeatures(ctx context.Context, in *GetServerFeaturesRequest, opts ...grpc.CallOption) (*GetServerFeaturesResponse, error)
	// GetAccountFeatures returns module account disco features.
	GetAccountFeatures(ctx context.Context, in *GetAccountFeaturesRequest, opts ...grpc.CallOption) (*GetAccountFeaturesResponse, error)
	// ProcessEvent method will be invoked by the server for all generated events associated to this module.
	ProcessEvent(ctx context.Context, in *ProcessEventRequest, opts ...grpc.CallOption) (*ProcessEventResponse, error)
	// ProcessIQ method will be invoked by the server for all received IQs associated to this module.
	ProcessIQ(ctx context.Context, in *ProcessIQRequest, opts ...grpc.CallOption) (*ProcessIQResponse, error)
	// InterceptStanza will be invoked to perform stanza transformation.
	InterceptStanza(ctx context.Context, in *InterceptStanzaRequest, opts ...grpc.CallOption) (*InterceptStanzaResponse, error)
	// GetStanzas returns a stream of stanzas to be routed by server.
	GetStanzas(ctx context.Context, in *GetStanzasRequest, opts ...grpc.CallOption) (Module_GetStanzasClient, error)
}

type moduleClient struct {
	cc *grpc.ClientConn
}

func NewModuleClient(cc *grpc.ClientConn) ModuleClient {
	return &moduleClient{cc}
}

func (c *moduleClient) GetStreamFeature(ctx context.Context, in *GetStreamFeatureRequest, opts ...grpc.CallOption) (*GetStreamFeatureResponse, error) {
	out := new(GetStreamFeatureResponse)
	err := c.cc.Invoke(ctx, "/jackal.api.module.v1.Module/GetStreamFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) GetServerFeatures(ctx context.Context, in *GetServerFeaturesRequest, opts ...grpc.CallOption) (*GetServerFeaturesResponse, error) {
	out := new(GetServerFeaturesResponse)
	err := c.cc.Invoke(ctx, "/jackal.api.module.v1.Module/GetServerFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) GetAccountFeatures(ctx context.Context, in *GetAccountFeaturesRequest, opts ...grpc.CallOption) (*GetAccountFeaturesResponse, error) {
	out := new(GetAccountFeaturesResponse)
	err := c.cc.Invoke(ctx, "/jackal.api.module.v1.Module/GetAccountFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) ProcessEvent(ctx context.Context, in *ProcessEventRequest, opts ...grpc.CallOption) (*ProcessEventResponse, error) {
	out := new(ProcessEventResponse)
	err := c.cc.Invoke(ctx, "/jackal.api.module.v1.Module/ProcessEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) ProcessIQ(ctx context.Context, in *ProcessIQRequest, opts ...grpc.CallOption) (*ProcessIQResponse, error) {
	out := new(ProcessIQResponse)
	err := c.cc.Invoke(ctx, "/jackal.api.module.v1.Module/ProcessIQ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) InterceptStanza(ctx context.Context, in *InterceptStanzaRequest, opts ...grpc.CallOption) (*InterceptStanzaResponse, error) {
	out := new(InterceptStanzaResponse)
	err := c.cc.Invoke(ctx, "/jackal.api.module.v1.Module/InterceptStanza", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) GetStanzas(ctx context.Context, in *GetStanzasRequest, opts ...grpc.CallOption) (Module_GetStanzasClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Module_serviceDesc.Streams[0], "/jackal.api.module.v1.Module/GetStanzas", opts...)
	if err != nil {
		return nil, err
	}
	x := &moduleGetStanzasClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Module_GetStanzasClient interface {
	Recv() (*stravaganza.PBElement, error)
	grpc.ClientStream
}

type moduleGetStanzasClient struct {
	grpc.ClientStream
}

func (x *moduleGetStanzasClient) Recv() (*stravaganza.PBElement, error) {
	m := new(stravaganza.PBElement)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModuleServer is the server API for Module service.
type ModuleServer interface {
	// GetStreamFeature returns module stream feature stanza.
	GetStreamFeature(context.Context, *GetStreamFeatureRequest) (*GetStreamFeatureResponse, error)
	// GetServerFeatures returns module server disco features.
	GetServerFeatures(context.Context, *GetServerFeaturesRequest) (*GetServerFeaturesResponse, error)
	// GetAccountFeatures returns module account disco features.
	GetAccountFeatures(context.Context, *GetAccountFeaturesRequest) (*GetAccountFeaturesResponse, error)
	// ProcessEvent method will be invoked by the server for all generated events associated to this module.
	ProcessEvent(context.Context, *ProcessEventRequest) (*ProcessEventResponse, error)
	// ProcessIQ method will be invoked by the server for all received IQs associated to this module.
	ProcessIQ(context.Context, *ProcessIQRequest) (*ProcessIQResponse, error)
	// InterceptStanza will be invoked to perform stanza transformation.
	InterceptStanza(context.Context, *InterceptStanzaRequest) (*InterceptStanzaResponse, error)
	// GetStanzas returns a stream of stanzas to be routed by server.
	GetStanzas(*GetStanzasRequest, Module_GetStanzasServer) error
}

// UnimplementedModuleServer can be embedded to have forward compatible implementations.
type UnimplementedModuleServer struct {
}

func (*UnimplementedModuleServer) GetStreamFeature(context.Context, *GetStreamFeatureRequest) (*GetStreamFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamFeature not implemented")
}
func (*UnimplementedModuleServer) GetServerFeatures(context.Context, *GetServerFeaturesRequest) (*GetServerFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerFeatures not implemented")
}
func (*UnimplementedModuleServer) GetAccountFeatures(context.Context, *GetAccountFeaturesRequest) (*GetAccountFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountFeatures not implemented")
}
func (*UnimplementedModuleServer) ProcessEvent(context.Context, *ProcessEventRequest) (*ProcessEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessEvent not implemented")
}
func (*UnimplementedModuleServer) ProcessIQ(context.Context, *ProcessIQRequest) (*ProcessIQResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessIQ not implemented")
}
func (*UnimplementedModuleServer) InterceptStanza(context.Context, *InterceptStanzaRequest) (*InterceptStanzaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterceptStanza not implemented")
}
func (*UnimplementedModuleServer) GetStanzas(*GetStanzasRequest, Module_GetStanzasServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStanzas not implemented")
}

func RegisterModuleServer(s *grpc.Server, srv ModuleServer) {
	s.RegisterService(&_Module_serviceDesc, srv)
}

func _Module_GetStreamFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).GetStreamFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackal.api.module.v1.Module/GetStreamFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).GetStreamFeature(ctx, req.(*GetStreamFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_GetServerFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).GetServerFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackal.api.module.v1.Module/GetServerFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).GetServerFeatures(ctx, req.(*GetServerFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_GetAccountFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).GetAccountFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackal.api.module.v1.Module/GetAccountFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).GetAccountFeatures(ctx, req.(*GetAccountFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_ProcessEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).ProcessEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackal.api.module.v1.Module/ProcessEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).ProcessEvent(ctx, req.(*ProcessEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_ProcessIQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessIQRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).ProcessIQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackal.api.module.v1.Module/ProcessIQ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).ProcessIQ(ctx, req.(*ProcessIQRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_InterceptStanza_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterceptStanzaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).InterceptStanza(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackal.api.module.v1.Module/InterceptStanza",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).InterceptStanza(ctx, req.(*InterceptStanzaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_GetStanzas_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetStanzasRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModuleServer).GetStanzas(m, &moduleGetStanzasServer{stream})
}

type Module_GetStanzasServer interface {
	Send(*stravaganza.PBElement) error
	grpc.ServerStream
}

type moduleGetStanzasServer struct {
	grpc.ServerStream
}

func (x *moduleGetStanzasServer) Send(m *stravaganza.PBElement) error {
	return x.ServerStream.SendMsg(m)
}

var _Module_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jackal.api.module.v1.Module",
	HandlerType: (*ModuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStreamFeature",
			Handler:    _Module_GetStreamFeature_Handler,
		},
		{
			MethodName: "GetServerFeatures",
			Handler:    _Module_GetServerFeatures_Handler,
		},
		{
			MethodName: "GetAccountFeatures",
			Handler:    _Module_GetAccountFeatures_Handler,
		},
		{
			MethodName: "ProcessEvent",
			Handler:    _Module_ProcessEvent_Handler,
		},
		{
			MethodName: "ProcessIQ",
			Handler:    _Module_ProcessIQ_Handler,
		},
		{
			MethodName: "InterceptStanza",
			Handler:    _Module_InterceptStanza_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStanzas",
			Handler:       _Module_GetStanzas_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "module.proto",
}
