// Copyright 2020 The jackal Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: eventhandler.proto

package v1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	stravaganza "github.com/jackal-xmpp/stravaganza"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// GetDiscoFeaturesRequest is the parameter message for GetDiscoFeatures rpc.
type GetDiscoFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDiscoFeaturesRequest) Reset() {
	*x = GetDiscoFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventhandler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscoFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscoFeaturesRequest) ProtoMessage() {}

func (x *GetDiscoFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventhandler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscoFeaturesRequest.ProtoReflect.Descriptor instead.
func (*GetDiscoFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_eventhandler_proto_rawDescGZIP(), []int{0}
}

// GetDiscoFeaturesResponse is the response returned by GetDiscoFeatures rpc.
type GetDiscoFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// server_features contains features that should be announced by server entity.
	ServerFeatures []string `protobuf:"bytes,1,rep,name=server_features,json=serverFeatures,proto3" json:"server_features,omitempty"`
	// account_features contains features that should be announced by account entities.
	AccountFeatures []string `protobuf:"bytes,2,rep,name=account_features,json=accountFeatures,proto3" json:"account_features,omitempty"`
}

func (x *GetDiscoFeaturesResponse) Reset() {
	*x = GetDiscoFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventhandler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscoFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscoFeaturesResponse) ProtoMessage() {}

func (x *GetDiscoFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventhandler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscoFeaturesResponse.ProtoReflect.Descriptor instead.
func (*GetDiscoFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_eventhandler_proto_rawDescGZIP(), []int{1}
}

func (x *GetDiscoFeaturesResponse) GetServerFeatures() []string {
	if x != nil {
		return x.ServerFeatures
	}
	return nil
}

func (x *GetDiscoFeaturesResponse) GetAccountFeatures() []string {
	if x != nil {
		return x.AccountFeatures
	}
	return nil
}

// ProcessEventRequest is the parameter message for ProcessEvent rpc.
type ProcessEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// instance_id is the id of the server instance that generated the event.
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// event_name is the name of the event object.
	EventName string `protobuf:"bytes,2,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	// EventPayload contains all info specifically associated to the event.
	//
	// Types that are assignable to Payload:
	//	*ProcessEventRequest_C2SStreamEvInfo
	//	*ProcessEventRequest_S2SStreamEvInfo
	//	*ProcessEventRequest_ExtComponentEvInfo
	//	*ProcessEventRequest_RosterEvInfo
	//	*ProcessEventRequest_VcardEvInfo
	//	*ProcessEventRequest_OfflineEvInfo
	//	*ProcessEventRequest_UserEvInfo
	Payload isProcessEventRequest_Payload `protobuf_oneof:"payload"`
}

func (x *ProcessEventRequest) Reset() {
	*x = ProcessEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventhandler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEventRequest) ProtoMessage() {}

func (x *ProcessEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventhandler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEventRequest.ProtoReflect.Descriptor instead.
func (*ProcessEventRequest) Descriptor() ([]byte, []int) {
	return file_eventhandler_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessEventRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ProcessEventRequest) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (m *ProcessEventRequest) GetPayload() isProcessEventRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ProcessEventRequest) GetC2SStreamEvInfo() *C2SStreamEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_C2SStreamEvInfo); ok {
		return x.C2SStreamEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetS2SStreamEvInfo() *S2SStreamEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_S2SStreamEvInfo); ok {
		return x.S2SStreamEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetExtComponentEvInfo() *ExternalComponentEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_ExtComponentEvInfo); ok {
		return x.ExtComponentEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetRosterEvInfo() *RosterEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_RosterEvInfo); ok {
		return x.RosterEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetVcardEvInfo() *VCardEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_VcardEvInfo); ok {
		return x.VcardEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetOfflineEvInfo() *OfflineEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_OfflineEvInfo); ok {
		return x.OfflineEvInfo
	}
	return nil
}

func (x *ProcessEventRequest) GetUserEvInfo() *UserEventInfo {
	if x, ok := x.GetPayload().(*ProcessEventRequest_UserEvInfo); ok {
		return x.UserEvInfo
	}
	return nil
}

type isProcessEventRequest_Payload interface {
	isProcessEventRequest_Payload()
}

type ProcessEventRequest_C2SStreamEvInfo struct {
	C2SStreamEvInfo *C2SStreamEventInfo `protobuf:"bytes,3,opt,name=c2s_stream_ev_info,json=c2sStreamEvInfo,proto3,oneof"`
}

type ProcessEventRequest_S2SStreamEvInfo struct {
	S2SStreamEvInfo *S2SStreamEventInfo `protobuf:"bytes,4,opt,name=s2s_stream_ev_info,json=s2sStreamEvInfo,proto3,oneof"`
}

type ProcessEventRequest_ExtComponentEvInfo struct {
	ExtComponentEvInfo *ExternalComponentEventInfo `protobuf:"bytes,5,opt,name=ext_component_ev_info,json=extComponentEvInfo,proto3,oneof"`
}

type ProcessEventRequest_RosterEvInfo struct {
	RosterEvInfo *RosterEventInfo `protobuf:"bytes,6,opt,name=roster_ev_info,json=rosterEvInfo,proto3,oneof"`
}

type ProcessEventRequest_VcardEvInfo struct {
	VcardEvInfo *VCardEventInfo `protobuf:"bytes,7,opt,name=vcard_ev_info,json=vcardEvInfo,proto3,oneof"`
}

type ProcessEventRequest_OfflineEvInfo struct {
	OfflineEvInfo *OfflineEventInfo `protobuf:"bytes,8,opt,name=offline_ev_info,json=offlineEvInfo,proto3,oneof"`
}

type ProcessEventRequest_UserEvInfo struct {
	UserEvInfo *UserEventInfo `protobuf:"bytes,9,opt,name=user_ev_info,json=userEvInfo,proto3,oneof"`
}

func (*ProcessEventRequest_C2SStreamEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_S2SStreamEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_ExtComponentEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_RosterEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_VcardEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_OfflineEvInfo) isProcessEventRequest_Payload() {}

func (*ProcessEventRequest_UserEvInfo) isProcessEventRequest_Payload() {}

// ProcessEventResponse is the response returned by ProcessEvent rpc.
type ProcessEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProcessEventResponse) Reset() {
	*x = ProcessEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventhandler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEventResponse) ProtoMessage() {}

func (x *ProcessEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eventhandler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEventResponse.ProtoReflect.Descriptor instead.
func (*ProcessEventResponse) Descriptor() ([]byte, []int) {
	return file_eventhandler_proto_rawDescGZIP(), []int{3}
}

// C2SStreamEventInfo contains all info associated to a C2S stream event.
type C2SStreamEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the event stream identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// jid represents the event associated JID.
	Jid string `protobuf:"bytes,2,opt,name=jid,proto3" json:"jid,omitempty"`
	// stanza contains the XMPP stanza associated to the event.
	Stanza *stravaganza.PBElement `protobuf:"bytes,3,opt,name=stanza,proto3" json:"stanza,omitempty"`
}

func (x *C2SStreamEventInfo) Reset() {
	*x = C2SStreamEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventhandler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2SStreamEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2SStreamEventInfo) ProtoMessage() {}

func (x *C2SStreamEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_eventhandler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2SStreamEventInfo.ProtoReflect.Descriptor instead.
func (*C2SStreamEventInfo) Descriptor() ([]byte, []int) {
	return file_eventhandler_proto_rawDescGZIP(), []int{4}
}

func (x *C2SStreamEventInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *C2SStreamEventInfo) GetJid() string {
	if x != nil {
		return x.Jid
	}
	return ""
}

func (x *C2SStreamEventInfo) GetStanza() *stravaganza.PBElement {
	if x != nil {
		return x.Stanza
	}
	return nil
}

// S2SStreamEventInfo contains all info associated to a S2S stream event.
type S2SStreamEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the event stream identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// sender is the S2S sender domain.
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// target is the S2S target domain.
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// stanza contains the XMPP stanza associated to the event.
	Stanza *stravaganza.PBElement `protobuf:"bytes,4,opt,name=stanza,proto3" json:"stanza,omitempty"`
}

func (x *S2SStreamEventInfo) Reset() {
	*x = S2SStreamEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventhandler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S2SStreamEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2SStreamEventInfo) ProtoMessage() {}

func (x *S2SStreamEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_eventhandler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2SStreamEventInfo.ProtoReflect.Descriptor instead.
func (*S2SStreamEventInfo) Descriptor() ([]byte, []int) {
	return file_eventhandler_proto_rawDescGZIP(), []int{5}
}

func (x *S2SStreamEventInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *S2SStreamEventInfo) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *S2SStreamEventInfo) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *S2SStreamEventInfo) GetStanza() *stravaganza.PBElement {
	if x != nil {
		return x.Stanza
	}
	return nil
}

// ExternalComponentEventInfo contains all info associated to an external component stream event.
type ExternalComponentEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the event stream identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// host is the external component host domain.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// stanza contains the XMPP stanza associated to the event.
	Stanza *stravaganza.PBElement `protobuf:"bytes,3,opt,name=stanza,proto3" json:"stanza,omitempty"`
}

func (x *ExternalComponentEventInfo) Reset() {
	*x = ExternalComponentEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventhandler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalComponentEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalComponentEventInfo) ProtoMessage() {}

func (x *ExternalComponentEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_eventhandler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalComponentEventInfo.ProtoReflect.Descriptor instead.
func (*ExternalComponentEventInfo) Descriptor() ([]byte, []int) {
	return file_eventhandler_proto_rawDescGZIP(), []int{6}
}

func (x *ExternalComponentEventInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExternalComponentEventInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ExternalComponentEventInfo) GetStanza() *stravaganza.PBElement {
	if x != nil {
		return x.Stanza
	}
	return nil
}

// RosterEventInfo contains all information associated to a roster event.
type RosterEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// username is the name of the roster owner.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// jid represents the event associated JID.
	Jid string `protobuf:"bytes,2,opt,name=jid,proto3" json:"jid,omitempty"`
	// subscription is the roster event subscription value.
	Subscription string `protobuf:"bytes,3,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *RosterEventInfo) Reset() {
	*x = RosterEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventhandler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RosterEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RosterEventInfo) ProtoMessage() {}

func (x *RosterEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_eventhandler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RosterEventInfo.ProtoReflect.Descriptor instead.
func (*RosterEventInfo) Descriptor() ([]byte, []int) {
	return file_eventhandler_proto_rawDescGZIP(), []int{7}
}

func (x *RosterEventInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RosterEventInfo) GetJid() string {
	if x != nil {
		return x.Jid
	}
	return ""
}

func (x *RosterEventInfo) GetSubscription() string {
	if x != nil {
		return x.Subscription
	}
	return ""
}

// VCardEventInfo contains all information associated to a vCard event.
type VCardEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// username is the name of the vCard user associated to this event.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *VCardEventInfo) Reset() {
	*x = VCardEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventhandler_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCardEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCardEventInfo) ProtoMessage() {}

func (x *VCardEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_eventhandler_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCardEventInfo.ProtoReflect.Descriptor instead.
func (*VCardEventInfo) Descriptor() ([]byte, []int) {
	return file_eventhandler_proto_rawDescGZIP(), []int{8}
}

func (x *VCardEventInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// OfflineEventInfo contails all information associated to an offline event.
type OfflineEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// username is the name of the vCard user associated to this event.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// message represents the event associated message.
	Message *stravaganza.PBElement `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *OfflineEventInfo) Reset() {
	*x = OfflineEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventhandler_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineEventInfo) ProtoMessage() {}

func (x *OfflineEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_eventhandler_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineEventInfo.ProtoReflect.Descriptor instead.
func (*OfflineEventInfo) Descriptor() ([]byte, []int) {
	return file_eventhandler_proto_rawDescGZIP(), []int{9}
}

func (x *OfflineEventInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OfflineEventInfo) GetMessage() *stravaganza.PBElement {
	if x != nil {
		return x.Message
	}
	return nil
}

// UserEventInfo contains all information associated to a user event.
type UserEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// username is the name of the user associated to this event.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *UserEventInfo) Reset() {
	*x = UserEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventhandler_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventInfo) ProtoMessage() {}

func (x *UserEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_eventhandler_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventInfo.ProtoReflect.Descriptor instead.
func (*UserEventInfo) Descriptor() ([]byte, []int) {
	return file_eventhandler_proto_rawDescGZIP(), []int{10}
}

func (x *UserEventInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

var File_eventhandler_proto protoreflect.FileDescriptor

var file_eventhandler_proto_rawDesc = []byte{
	0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x1a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x63,
	0x6b, 0x61, 0x6c, 0x2d, 0x78, 0x6d, 0x70, 0x70, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67,
	0x61, 0x6e, 0x7a, 0x61, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x6e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x22, 0xd9, 0x05, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x63, 0x32, 0x73,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x32, 0x53, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x32, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x12, 0x73, 0x32, 0x73, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x32, 0x53, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x32, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x45, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6b, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x12, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x45, 0x76,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x0e, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6a,
	0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x0d, 0x76, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x43,
	0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b,
	0x76, 0x63, 0x61, 0x72, 0x64, 0x45, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x56, 0x0a, 0x0f, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x61, 0x63, 0x6b,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x45, 0x76, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x16, 0x0a,
	0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a, 0x12, 0x43, 0x32, 0x53, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6a,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x50, 0x42, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x22, 0x84, 0x01,
	0x0a, 0x12, 0x53, 0x32, 0x53, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e,
	0x7a, 0x61, 0x2e, 0x50, 0x42, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x6e, 0x7a, 0x61, 0x22, 0x70, 0x0a, 0x1a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67,
	0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x50, 0x42, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x22, 0x63, 0x0a, 0x0f, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6a, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x0e, 0x56,
	0x43, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x10, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x50, 0x42, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x80, 0x02, 0x0a, 0x0c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x7d, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x33, 0x2e,
	0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6a, 0x61, 0x63, 0x6b,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x0a, 0x20, 0x6f,
	0x72, 0x67, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42,
	0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x70,
	0x63, 0x41, 0x50, 0x49, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2d, 0x78, 0x6d, 0x70, 0x70, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eventhandler_proto_rawDescOnce sync.Once
	file_eventhandler_proto_rawDescData = file_eventhandler_proto_rawDesc
)

func file_eventhandler_proto_rawDescGZIP() []byte {
	file_eventhandler_proto_rawDescOnce.Do(func() {
		file_eventhandler_proto_rawDescData = protoimpl.X.CompressGZIP(file_eventhandler_proto_rawDescData)
	})
	return file_eventhandler_proto_rawDescData
}

var file_eventhandler_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_eventhandler_proto_goTypes = []interface{}{
	(*GetDiscoFeaturesRequest)(nil),    // 0: jackal.api.eventhandler.v1.GetDiscoFeaturesRequest
	(*GetDiscoFeaturesResponse)(nil),   // 1: jackal.api.eventhandler.v1.GetDiscoFeaturesResponse
	(*ProcessEventRequest)(nil),        // 2: jackal.api.eventhandler.v1.ProcessEventRequest
	(*ProcessEventResponse)(nil),       // 3: jackal.api.eventhandler.v1.ProcessEventResponse
	(*C2SStreamEventInfo)(nil),         // 4: jackal.api.eventhandler.v1.C2SStreamEventInfo
	(*S2SStreamEventInfo)(nil),         // 5: jackal.api.eventhandler.v1.S2SStreamEventInfo
	(*ExternalComponentEventInfo)(nil), // 6: jackal.api.eventhandler.v1.ExternalComponentEventInfo
	(*RosterEventInfo)(nil),            // 7: jackal.api.eventhandler.v1.RosterEventInfo
	(*VCardEventInfo)(nil),             // 8: jackal.api.eventhandler.v1.VCardEventInfo
	(*OfflineEventInfo)(nil),           // 9: jackal.api.eventhandler.v1.OfflineEventInfo
	(*UserEventInfo)(nil),              // 10: jackal.api.eventhandler.v1.UserEventInfo
	(*stravaganza.PBElement)(nil),      // 11: stravaganza.PBElement
}
var file_eventhandler_proto_depIdxs = []int32{
	4,  // 0: jackal.api.eventhandler.v1.ProcessEventRequest.c2s_stream_ev_info:type_name -> jackal.api.eventhandler.v1.C2SStreamEventInfo
	5,  // 1: jackal.api.eventhandler.v1.ProcessEventRequest.s2s_stream_ev_info:type_name -> jackal.api.eventhandler.v1.S2SStreamEventInfo
	6,  // 2: jackal.api.eventhandler.v1.ProcessEventRequest.ext_component_ev_info:type_name -> jackal.api.eventhandler.v1.ExternalComponentEventInfo
	7,  // 3: jackal.api.eventhandler.v1.ProcessEventRequest.roster_ev_info:type_name -> jackal.api.eventhandler.v1.RosterEventInfo
	8,  // 4: jackal.api.eventhandler.v1.ProcessEventRequest.vcard_ev_info:type_name -> jackal.api.eventhandler.v1.VCardEventInfo
	9,  // 5: jackal.api.eventhandler.v1.ProcessEventRequest.offline_ev_info:type_name -> jackal.api.eventhandler.v1.OfflineEventInfo
	10, // 6: jackal.api.eventhandler.v1.ProcessEventRequest.user_ev_info:type_name -> jackal.api.eventhandler.v1.UserEventInfo
	11, // 7: jackal.api.eventhandler.v1.C2SStreamEventInfo.stanza:type_name -> stravaganza.PBElement
	11, // 8: jackal.api.eventhandler.v1.S2SStreamEventInfo.stanza:type_name -> stravaganza.PBElement
	11, // 9: jackal.api.eventhandler.v1.ExternalComponentEventInfo.stanza:type_name -> stravaganza.PBElement
	11, // 10: jackal.api.eventhandler.v1.OfflineEventInfo.message:type_name -> stravaganza.PBElement
	0,  // 11: jackal.api.eventhandler.v1.EventHandler.GetDiscoFeatures:input_type -> jackal.api.eventhandler.v1.GetDiscoFeaturesRequest
	2,  // 12: jackal.api.eventhandler.v1.EventHandler.ProcessEvent:input_type -> jackal.api.eventhandler.v1.ProcessEventRequest
	1,  // 13: jackal.api.eventhandler.v1.EventHandler.GetDiscoFeatures:output_type -> jackal.api.eventhandler.v1.GetDiscoFeaturesResponse
	3,  // 14: jackal.api.eventhandler.v1.EventHandler.ProcessEvent:output_type -> jackal.api.eventhandler.v1.ProcessEventResponse
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_eventhandler_proto_init() }
func file_eventhandler_proto_init() {
	if File_eventhandler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eventhandler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscoFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventhandler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscoFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventhandler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventhandler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventhandler_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2SStreamEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventhandler_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S2SStreamEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventhandler_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalComponentEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventhandler_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RosterEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventhandler_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCardEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventhandler_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventhandler_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eventhandler_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ProcessEventRequest_C2SStreamEvInfo)(nil),
		(*ProcessEventRequest_S2SStreamEvInfo)(nil),
		(*ProcessEventRequest_ExtComponentEvInfo)(nil),
		(*ProcessEventRequest_RosterEvInfo)(nil),
		(*ProcessEventRequest_VcardEvInfo)(nil),
		(*ProcessEventRequest_OfflineEvInfo)(nil),
		(*ProcessEventRequest_UserEvInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eventhandler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eventhandler_proto_goTypes,
		DependencyIndexes: file_eventhandler_proto_depIdxs,
		MessageInfos:      file_eventhandler_proto_msgTypes,
	}.Build()
	File_eventhandler_proto = out.File
	file_eventhandler_proto_rawDesc = nil
	file_eventhandler_proto_goTypes = nil
	file_eventhandler_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventHandlerClient is the client API for EventHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventHandlerClient interface {
	// GetDiscoFeatures returns event handler disco features.
	GetDiscoFeatures(ctx context.Context, in *GetDiscoFeaturesRequest, opts ...grpc.CallOption) (*GetDiscoFeaturesResponse, error)
	// ProcessEvent method will be invoked by the server for all generated events associated to this handler.
	ProcessEvent(ctx context.Context, in *ProcessEventRequest, opts ...grpc.CallOption) (*ProcessEventResponse, error)
}

type eventHandlerClient struct {
	cc *grpc.ClientConn
}

func NewEventHandlerClient(cc *grpc.ClientConn) EventHandlerClient {
	return &eventHandlerClient{cc}
}

func (c *eventHandlerClient) GetDiscoFeatures(ctx context.Context, in *GetDiscoFeaturesRequest, opts ...grpc.CallOption) (*GetDiscoFeaturesResponse, error) {
	out := new(GetDiscoFeaturesResponse)
	err := c.cc.Invoke(ctx, "/jackal.api.eventhandler.v1.EventHandler/GetDiscoFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) ProcessEvent(ctx context.Context, in *ProcessEventRequest, opts ...grpc.CallOption) (*ProcessEventResponse, error) {
	out := new(ProcessEventResponse)
	err := c.cc.Invoke(ctx, "/jackal.api.eventhandler.v1.EventHandler/ProcessEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventHandlerServer is the server API for EventHandler service.
type EventHandlerServer interface {
	// GetDiscoFeatures returns event handler disco features.
	GetDiscoFeatures(context.Context, *GetDiscoFeaturesRequest) (*GetDiscoFeaturesResponse, error)
	// ProcessEvent method will be invoked by the server for all generated events associated to this handler.
	ProcessEvent(context.Context, *ProcessEventRequest) (*ProcessEventResponse, error)
}

// UnimplementedEventHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedEventHandlerServer struct {
}

func (*UnimplementedEventHandlerServer) GetDiscoFeatures(context.Context, *GetDiscoFeaturesRequest) (*GetDiscoFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoFeatures not implemented")
}
func (*UnimplementedEventHandlerServer) ProcessEvent(context.Context, *ProcessEventRequest) (*ProcessEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessEvent not implemented")
}

func RegisterEventHandlerServer(s *grpc.Server, srv EventHandlerServer) {
	s.RegisterService(&_EventHandler_serviceDesc, srv)
}

func _EventHandler_GetDiscoFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscoFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).GetDiscoFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackal.api.eventhandler.v1.EventHandler/GetDiscoFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).GetDiscoFeatures(ctx, req.(*GetDiscoFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_ProcessEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).ProcessEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackal.api.eventhandler.v1.EventHandler/ProcessEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).ProcessEvent(ctx, req.(*ProcessEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jackal.api.eventhandler.v1.EventHandler",
	HandlerType: (*EventHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDiscoFeatures",
			Handler:    _EventHandler_GetDiscoFeatures_Handler,
		},
		{
			MethodName: "ProcessEvent",
			Handler:    _EventHandler_ProcessEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eventhandler.proto",
}
