// Copyright 2020 The jackal Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: iqhandler.proto

package v1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	stravaganza "github.com/jackal-xmpp/stravaganza"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// GetDiscoFeaturesRequest is the parameter message for GetDiscoFeatures rpc.
type GetDiscoFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDiscoFeaturesRequest) Reset() {
	*x = GetDiscoFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iqhandler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscoFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscoFeaturesRequest) ProtoMessage() {}

func (x *GetDiscoFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iqhandler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscoFeaturesRequest.ProtoReflect.Descriptor instead.
func (*GetDiscoFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_iqhandler_proto_rawDescGZIP(), []int{0}
}

// GetDiscoFeaturesResponse is the response returned by GetDiscoFeatures rpc.
type GetDiscoFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// server_features contains features that should be announced by server entity.
	ServerFeatures []string `protobuf:"bytes,1,rep,name=server_features,json=serverFeatures,proto3" json:"server_features,omitempty"`
	// account_features contains features that should be announced by account entities.
	AccountFeatures []string `protobuf:"bytes,2,rep,name=account_features,json=accountFeatures,proto3" json:"account_features,omitempty"`
}

func (x *GetDiscoFeaturesResponse) Reset() {
	*x = GetDiscoFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iqhandler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscoFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscoFeaturesResponse) ProtoMessage() {}

func (x *GetDiscoFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iqhandler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscoFeaturesResponse.ProtoReflect.Descriptor instead.
func (*GetDiscoFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_iqhandler_proto_rawDescGZIP(), []int{1}
}

func (x *GetDiscoFeaturesResponse) GetServerFeatures() []string {
	if x != nil {
		return x.ServerFeatures
	}
	return nil
}

func (x *GetDiscoFeaturesResponse) GetAccountFeatures() []string {
	if x != nil {
		return x.AccountFeatures
	}
	return nil
}

// ProcessIQRequest is the parameter message for ProcessIQ rpc.
type ProcessIQRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// iq is the module registered IQ to be processed.
	Iq *stravaganza.PBElement `protobuf:"bytes,1,opt,name=iq,proto3" json:"iq,omitempty"`
}

func (x *ProcessIQRequest) Reset() {
	*x = ProcessIQRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iqhandler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessIQRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessIQRequest) ProtoMessage() {}

func (x *ProcessIQRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iqhandler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessIQRequest.ProtoReflect.Descriptor instead.
func (*ProcessIQRequest) Descriptor() ([]byte, []int) {
	return file_iqhandler_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessIQRequest) GetIq() *stravaganza.PBElement {
	if x != nil {
		return x.Iq
	}
	return nil
}

// ProcessIQResponse is the response returned by ProcessIQ rpc.
type ProcessIQResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resp_stanzas contains all module response stanzas to be routed by server.
	RespStanzas []*stravaganza.PBElement `protobuf:"bytes,1,rep,name=resp_stanzas,json=respStanzas,proto3" json:"resp_stanzas,omitempty"`
}

func (x *ProcessIQResponse) Reset() {
	*x = ProcessIQResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iqhandler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessIQResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessIQResponse) ProtoMessage() {}

func (x *ProcessIQResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iqhandler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessIQResponse.ProtoReflect.Descriptor instead.
func (*ProcessIQResponse) Descriptor() ([]byte, []int) {
	return file_iqhandler_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessIQResponse) GetRespStanzas() []*stravaganza.PBElement {
	if x != nil {
		return x.RespStanzas
	}
	return nil
}

var File_iqhandler_proto protoreflect.FileDescriptor

var file_iqhandler_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x69, 0x71, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x17, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x71,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x34, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2d, 0x78, 0x6d,
	0x70, 0x70, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61, 0x2f, 0x73,
	0x74, 0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x10, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x51, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x02, 0x69, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61, 0x2e, 0x50, 0x42, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x02, 0x69, 0x71, 0x22, 0x4e, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x51, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x76, 0x61, 0x67, 0x61, 0x6e, 0x7a, 0x61,
	0x2e, 0x50, 0x42, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x70,
	0x53, 0x74, 0x61, 0x6e, 0x7a, 0x61, 0x73, 0x32, 0xe8, 0x01, 0x0a, 0x09, 0x49, 0x51, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x77, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x6a, 0x61, 0x63, 0x6b,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x71, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6a, 0x61,
	0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x71, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x51, 0x12, 0x29, 0x2e, 0x6a, 0x61,
	0x63, 0x6b, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x71, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x51, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x71, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x51, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x66, 0x0a, 0x1d, 0x6f, 0x72, 0x67, 0x2e, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x71, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x42, 0x10, 0x49, 0x51, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x50, 0x49, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x63, 0x6b, 0x61, 0x6c, 0x2d, 0x78, 0x6d, 0x70, 0x70, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x71,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_iqhandler_proto_rawDescOnce sync.Once
	file_iqhandler_proto_rawDescData = file_iqhandler_proto_rawDesc
)

func file_iqhandler_proto_rawDescGZIP() []byte {
	file_iqhandler_proto_rawDescOnce.Do(func() {
		file_iqhandler_proto_rawDescData = protoimpl.X.CompressGZIP(file_iqhandler_proto_rawDescData)
	})
	return file_iqhandler_proto_rawDescData
}

var file_iqhandler_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_iqhandler_proto_goTypes = []interface{}{
	(*GetDiscoFeaturesRequest)(nil),  // 0: jackal.api.iqhandler.v1.GetDiscoFeaturesRequest
	(*GetDiscoFeaturesResponse)(nil), // 1: jackal.api.iqhandler.v1.GetDiscoFeaturesResponse
	(*ProcessIQRequest)(nil),         // 2: jackal.api.iqhandler.v1.ProcessIQRequest
	(*ProcessIQResponse)(nil),        // 3: jackal.api.iqhandler.v1.ProcessIQResponse
	(*stravaganza.PBElement)(nil),    // 4: stravaganza.PBElement
}
var file_iqhandler_proto_depIdxs = []int32{
	4, // 0: jackal.api.iqhandler.v1.ProcessIQRequest.iq:type_name -> stravaganza.PBElement
	4, // 1: jackal.api.iqhandler.v1.ProcessIQResponse.resp_stanzas:type_name -> stravaganza.PBElement
	0, // 2: jackal.api.iqhandler.v1.IQHandler.GetDiscoFeatures:input_type -> jackal.api.iqhandler.v1.GetDiscoFeaturesRequest
	2, // 3: jackal.api.iqhandler.v1.IQHandler.ProcessIQ:input_type -> jackal.api.iqhandler.v1.ProcessIQRequest
	1, // 4: jackal.api.iqhandler.v1.IQHandler.GetDiscoFeatures:output_type -> jackal.api.iqhandler.v1.GetDiscoFeaturesResponse
	3, // 5: jackal.api.iqhandler.v1.IQHandler.ProcessIQ:output_type -> jackal.api.iqhandler.v1.ProcessIQResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_iqhandler_proto_init() }
func file_iqhandler_proto_init() {
	if File_iqhandler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_iqhandler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscoFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iqhandler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscoFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iqhandler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessIQRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iqhandler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessIQResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iqhandler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_iqhandler_proto_goTypes,
		DependencyIndexes: file_iqhandler_proto_depIdxs,
		MessageInfos:      file_iqhandler_proto_msgTypes,
	}.Build()
	File_iqhandler_proto = out.File
	file_iqhandler_proto_rawDesc = nil
	file_iqhandler_proto_goTypes = nil
	file_iqhandler_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IQHandlerClient is the client API for IQHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IQHandlerClient interface {
	// GetDiscoFeatures returns IQ handler disco features.
	GetDiscoFeatures(ctx context.Context, in *GetDiscoFeaturesRequest, opts ...grpc.CallOption) (*GetDiscoFeaturesResponse, error)
	// ProcessIQ method will be invoked by the server for all received IQs associated to this handler.
	ProcessIQ(ctx context.Context, in *ProcessIQRequest, opts ...grpc.CallOption) (*ProcessIQResponse, error)
}

type iQHandlerClient struct {
	cc *grpc.ClientConn
}

func NewIQHandlerClient(cc *grpc.ClientConn) IQHandlerClient {
	return &iQHandlerClient{cc}
}

func (c *iQHandlerClient) GetDiscoFeatures(ctx context.Context, in *GetDiscoFeaturesRequest, opts ...grpc.CallOption) (*GetDiscoFeaturesResponse, error) {
	out := new(GetDiscoFeaturesResponse)
	err := c.cc.Invoke(ctx, "/jackal.api.iqhandler.v1.IQHandler/GetDiscoFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iQHandlerClient) ProcessIQ(ctx context.Context, in *ProcessIQRequest, opts ...grpc.CallOption) (*ProcessIQResponse, error) {
	out := new(ProcessIQResponse)
	err := c.cc.Invoke(ctx, "/jackal.api.iqhandler.v1.IQHandler/ProcessIQ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IQHandlerServer is the server API for IQHandler service.
type IQHandlerServer interface {
	// GetDiscoFeatures returns IQ handler disco features.
	GetDiscoFeatures(context.Context, *GetDiscoFeaturesRequest) (*GetDiscoFeaturesResponse, error)
	// ProcessIQ method will be invoked by the server for all received IQs associated to this handler.
	ProcessIQ(context.Context, *ProcessIQRequest) (*ProcessIQResponse, error)
}

// UnimplementedIQHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedIQHandlerServer struct {
}

func (*UnimplementedIQHandlerServer) GetDiscoFeatures(context.Context, *GetDiscoFeaturesRequest) (*GetDiscoFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoFeatures not implemented")
}
func (*UnimplementedIQHandlerServer) ProcessIQ(context.Context, *ProcessIQRequest) (*ProcessIQResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessIQ not implemented")
}

func RegisterIQHandlerServer(s *grpc.Server, srv IQHandlerServer) {
	s.RegisterService(&_IQHandler_serviceDesc, srv)
}

func _IQHandler_GetDiscoFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscoFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IQHandlerServer).GetDiscoFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackal.api.iqhandler.v1.IQHandler/GetDiscoFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IQHandlerServer).GetDiscoFeatures(ctx, req.(*GetDiscoFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IQHandler_ProcessIQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessIQRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IQHandlerServer).ProcessIQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jackal.api.iqhandler.v1.IQHandler/ProcessIQ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IQHandlerServer).ProcessIQ(ctx, req.(*ProcessIQRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IQHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jackal.api.iqhandler.v1.IQHandler",
	HandlerType: (*IQHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDiscoFeatures",
			Handler:    _IQHandler_GetDiscoFeatures_Handler,
		},
		{
			MethodName: "ProcessIQ",
			Handler:    _IQHandler_ProcessIQ_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iqhandler.proto",
}
